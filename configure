# License: Public Domain #
##########################
#!/bin/bash
##########################

ARCH=`uname -m 2>/dev/null`
OS=`uname   -s 2>/dev/null`
DEBUG=no
HELP=no
WITH_HIGHCHARTS=yes
WITH_PLOTLY=yes
WITH_LIBSODIUM=no
WITH_CANDLESTICKS=no

mkdir -p build
echo "#ifndef __BUILD_H"      > build/build.h
echo "#define __BUILD_H"     >> build/build.h
echo "#define __${OS}__ 1"   >> build/build.h

while [ $# -ne 0 ];
do
	case "$1" in
		--prefix=)                  INSTALL="$1"        ;;
		--debug)                    DEBUG=yes           ;;
		--help)                     HELP=yes            ;;
		--with-highcharts)          WITH_HIGHCHARTS=yes ;;
		--without-highcharts)       WITH_HIGHCHARTS=no  ;;
		--with-plotly)              WITH_PLOTLY=yes     ;;
		--without-plotly)           WITH_PLOTLY=no      ;;
		--with-libsodium)           WITH_PLOTLY=yes     ;;
		--without-libsodium)        WITH_PLOTLY=no      ;;
		--with-candlesticks)        WITH_PLOTLY=yes     ;;
		--without-candlesticks)     WITH_PLOTLY=no      ;;
	esac;
	shift
done

if [ $HELP = yes ]; then
cat << END
	--help               print help
	--prefix=PATH        set installation prefix
	--with-highcharts    turns on highcharts (default: yes)
	--without-highcharts disables highcharts (default: no)
	--with-plotly        turns on highcharts (default: yes)
	--without-plotly     disables highcharts (default: no)
	--with-libsodium     turns on libsodium  (default: no)
	--without-libsodium  disables libsodium  (default: yes)
	--with-candlesticks  libta (compile errors on some platforms)  (default: no)
	--without-without    disables libta  (default: yes)
END
	exit 1
fi

if [ $DEBUG = yes ]; then
	echo "#define DEBUG 1" >> build/build.h
fi

if [ $WITH_HIGHCHARTS = yes ]; then
	echo "#define HIGHCHARTS 1" >> build/build.h
fi

if [ $WITH_PLOTLY = yes ]; then
	echo "#define PLOTLY 1" >> build/build.h
fi

if [ $WITH_LIBSODIUM = yes ]; then
	echo "#define LIBSODIUM 1" >> build/build.h
fi

echo "#endif" >> build/build.h


cat << EOF > Makefile

################
#   Makefile   #
################
EXE        := stockminer
EXT        := src/external/
CC         := gcc
CFLAGS     := -O0 -pie -fPIE -D_FORTIFY_SOURCE=2 -Wl,-z,relro,-z,now
CPPFLAGS   := -fpermissive
LDFLAGS    := -lz -lpthread -lssl -lcrypto -ldl -lm -lsodium -lcurl -Lbuild/lib
LIBOBJ     := \$(EXT)/libhydrogen/libhydrogen.a \$(EXT)/lmdb/liblmdb.a \$(EXT)/queues/libqueues.a
WARN       := -Wno-address-of-packed-member -Wno-unused-result -Wno-write-strings -Wno-deprecated -Wno-misleading-indentation
DEBUG      := $DEBUG
PLOTLY     := $WITH_PLOTLY
HIGHCHARTS := $WITH_HIGHCHARTS
LDFLAGS    += \$(LIBOBJ)

# XXX: refuses to add src/external/yyjson.c for some reason (Makefile is broken)
################
#  SRC & OBJ   #
################
C_SUBDIR := src/c src/c/stocks src/external
H_SUBDIR := src/c/include/ src/external/
INCS     := \$(wildcard *.h \$(foreach fd, \$(H_SUBDIR), \$(fd)/*.h))
SRC      := \$(wildcard *.c \$(foreach fd, \$(C_SUBDIR), \$(fd)/*.c))
OBJ      := \$(filter %.o, \$(SRC:.c=.o),\$(OBJ))

################
#  filter-out  #
################
SRC      := \$(filter-out src/c/os/windows.c,\$(SRC))
OBJ      := \$(filter-out src/c/os/windows.o,\$(OBJ))
SRC      := \$(filter-out src/c/os/unix.c src/external/strptime.c,\$(SRC))
OBJ      := \$(filter-out src/c/os/unix.o src/external/strptime.o,\$(OBJ))
SRC      := \$(filter-out src/external/strptime.c,\$(SRC))
OBJ      := \$(filter-out src/external/strptime.o,\$(OBJ))

################
#   includes   #
################
INCLUDE  := -Isrc/c/include/ -Ibuild/ -Isrc/external/
INCLUDE  += -Isrc/external/lmdb
INCLUDE  += -Isrc/external/libhydrogen
INCLUDE  += -Isrc/external/queues
CFLAGS   += \$(INCLUDE)
CFLAGS   += \$(WARN)

################
# Unix/Windows #
################
ifeq (\$(OS),Windows_NT)
	OperatingSystem := Windows
	SRC += src/c/os/windows.c src/external/strptime.c
	OBJ += src/c/os/windows.o src/external/strptime.o
	SRC += src/external/yyjson.c
	OBJ += src/external/yyjson.o
else
	OperatingSystem := \$(shell sh -c 'uname')
	SRC += src/c/os/unix.c
	OBJ += src/c/os/unix.o
	SRC += src/external/yyjson.c
	OBJ += src/external/yyjson.o
endif

###############
#build/build.h#
###############
ifeq (\$(DEBUG),yes)
	CFLAGS += -ggdb3
endif

###############
# Main Target #
###############
.PHONY:all

all:\$(OBJ) \$(EXE)

\$(OBJ):\$(INCS) | libhydrogen lmdb queues certs wasm

%.o: %.c
	\$(CC) \$(CFLAGS) -c \$< -o \$@

\$(EXE): \$(OBJ)
	\$(CC) \$(CFLAGS) \$(OBJ) -o \$@ \$(LDFLAGS)

libhydrogen:
	@cd src/external/libhydrogen && make
lmdb:
	@cd src/external/lmdb && make
queues:
	@cd src/external/queues && make

certs: www/key.pem

www/key.pem:
	openssl req -new -newkey rsa:2048 -sha256 -days 365 -nodes -x509 -keyout www/key.pem -out www/cert.pem -subj '/CN=localhost/O=XX/C=XX'

j:
	make -j 12
wasm:
	@cd src/external/libhydrogen && emcc -O0 hydrogen.c -o hydrogen.html -DNDEBUG -s EXPORTED_FUNCTIONS='["_hydro_init","_hydro_sign_create","_hydro_pwhash_deterministic","_hydro_pwhash_keygen","_hydro_sign_keygen_deterministic"]' -s STANDALONE_WASM -s WASM_BIGINT=1 --no-entry -s MINIFY_HTML=0 -s ASSERTIONS=0 -sEXPORTED_RUNTIME_METHODS=ccall,cwrap --no-entry
	@cp src/external/libhydrogen/hydrogen.js src/website/mainpage/stockminer/js
	@cp src/external/libhydrogen/hydrogen.wasm www/
	@sed -i 's/hydrogen.wasm/\/wasm/g' src/website/mainpage/stockminer/js/hydrogen.js

clean:
	make c2
	make c3
	make c4
	@cd src/external/lmdb && make clean
	@cd src/external/queues && make clean
	@cd src/external/libhydrogen && make clean
	rm -f \$(EXE) *~ .gitignore~ www/hydrogen.wasm

c2:
	find ./src -name "*~"    -delete
	find ./src -name "*.swp" -delete

c3:
	find ./src -name "*.o"   -delete

c4:
	find ./src/python -name "*.pyc" -delete
	find ./src/python -name "__pycache__" -delete

r:
	./stockminer -r

.PHONY:data
data:
	tar -czf www/stockdata.tar.gz data/stocks/

linux:
	mkdir -p data/stocks/stockdb/{csv,wsj,yahoo}
	sudo apt-get -y install libtool gcc make cmake npm python3-pip zlib1g-dev python3-pbr libssl-dev emscripten libcurl4-openssl-dev libcurl4 libcurl3-gnutls libcurl4-openssl-dev libcap2-bin texinfo python3-venv wkhtmltopdf libsodium23 libsodium-dev
	sudo npm install -g html-minifier terser
	sudo pip3 install pandas pandas-datareader parsedatetime pbr yahoo-earnings-calendar yfinance urllib3 certbot xlsxwriter xlwt scipy holidays datedelta ta pandas_market_calendars
	sudo pip3 install --upgrade ta
	curl -k https://www.stockminer.org/data -o build/stockdata.tar.gz
	tar -xzf build/stockdata.tar.gz -C .
	make -j 4

candles:
	cd build && git clone https://github.com/stoni/ta-lib/
	cd build/ta-lib && chmod +x autogen.sh && ./autogen.sh && ./configure && make && cp src/.libs/libta_lib.so ../../build

windows:
	sudo apt-get install gcc-multilib
	sudo ln -s /usr/bin/x86_64-w64-mingw32-windres /usr/bin/windres

EOF
